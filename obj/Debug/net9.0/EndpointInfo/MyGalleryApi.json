{
  "openapi": "3.0.1",
  "info": {
    "title": "Gallery API",
    "description": "New backend service that provides resources for Gallery API.",
    "contact": {
      "name": "Moksh Bansal",
      "email": "mokshbansal07@gmail.com"
    }
  },
  "paths": {
    "/api/Artifact": {
      "get": {
        "tags": [
          "Artifact"
        ],
        "summary": "Retrieve all artifacts.",
        "responses": {
          "200": {
            "description": "Returns the list of artifacts"
          }
        }
      },
      "post": {
        "tags": [
          "Artifact"
        ],
        "summary": "Create a new artifact.",
        "description": "Sample Request:\r\n    POST /api/artifact\r\n    {\r\n        \"title\": \"Artifact 1\",\r\n        \"description\": \"A sample artifact\",\r\n        \"artistId\": 1,\r\n        \"exhibitionId\": 2\r\n    }",
        "requestBody": {
          "description": "The artifact to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Artifact"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Artifact"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Artifact"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created artifact"
          },
          "400": {
            "description": "If the artifact is null or invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Artifact/{id}": {
      "get": {
        "tags": [
          "Artifact"
        ],
        "summary": "Retrieve a specific artifact by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the artifact to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the artifact with the specified ID"
          },
          "404": {
            "description": "If the artifact is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Artifact"
        ],
        "summary": "Update an existing artifact.",
        "description": "Sample Request:\r\n    PUT /api/artifact/1\r\n    {\r\n        \"id\": 1,\r\n        \"title\": \"Updated Artifact\",\r\n        \"description\": \"Updated description\",\r\n        \"artistId\": 1,\r\n        \"exhibitionId\": 2\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the artifact to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated artifact data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Artifact"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Artifact"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Artifact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated artifact"
          },
          "400": {
            "description": "If the artifact data is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the artifact is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Artifact"
        ],
        "summary": "Delete an artifact by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the artifact to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "If the artifact is successfully deleted"
          },
          "400": {
            "description": "If the ID is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the artifact is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Artifact/exists/{id}": {
      "get": {
        "tags": [
          "Artifact"
        ],
        "summary": "Check if an artifact exists by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the artifact to check.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns true if the artifact exists, false otherwise"
          },
          "400": {
            "description": "If the ID is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Artist": {
      "get": {
        "tags": [
          "Artist"
        ],
        "summary": "Retrieve all artists.",
        "responses": {
          "200": {
            "description": "Returns the list of artists"
          }
        }
      },
      "post": {
        "tags": [
          "Artist"
        ],
        "summary": "Create a new artist.",
        "description": "Sample Request:\r\n    POST /api/artist\r\n    {\r\n        \"name\": \"Artist Name\",\r\n        \"bio\": \"A brief biography\",\r\n        \"birthDate\": \"1980-01-01\",\r\n        \"deathDate\": null,\r\n        \"nationality\": \"American\"\r\n    }",
        "requestBody": {
          "description": "The artist to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Artist"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Artist"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Artist"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created artist"
          },
          "400": {
            "description": "If the artist is null or invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Artist/{id}": {
      "get": {
        "tags": [
          "Artist"
        ],
        "summary": "Retrieve a specific artist by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the artist to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the artist with the specified ID"
          },
          "404": {
            "description": "If the artist is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Artist"
        ],
        "summary": "Update an existing artist.",
        "description": "Sample Request:\r\n    PUT /api/artist/1\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Updated Artist Name\",\r\n        \"bio\": \"Updated biography\",\r\n        \"birthDate\": \"1980-01-01\",\r\n        \"deathDate\": null,\r\n        \"nationality\": \"American\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the artist to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated artist data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Artist"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Artist"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Artist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated artist"
          },
          "400": {
            "description": "If the artist data is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the artist is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Artist"
        ],
        "summary": "Delete an artist by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the artist to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "If the artist is successfully deleted"
          },
          "404": {
            "description": "If the artist is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Artist/exists/{id}": {
      "get": {
        "tags": [
          "Artist"
        ],
        "summary": "Check if an artist exists by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the artist to check.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns true if the artist exists, false otherwise"
          }
        }
      }
    },
    "/api/Comment": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Retrieve all comments.",
        "responses": {
          "200": {
            "description": "Returns the list of comments"
          }
        }
      },
      "post": {
        "tags": [
          "Comment"
        ],
        "summary": "Create a new comment.",
        "description": "Sample Request:\r\n    POST /api/comment\r\n    {\r\n        \"text\": \"This is a sample comment\",\r\n        \"artifactId\": 1,\r\n        \"userId\": 2\r\n    }",
        "requestBody": {
          "description": "The comment to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created comment"
          },
          "400": {
            "description": "If the comment is null or invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Comment/{id}": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Retrieve a specific comment by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the comment to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the comment with the specified ID"
          },
          "404": {
            "description": "If the comment is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Comment"
        ],
        "summary": "Update an existing comment.",
        "description": "Sample Request:\r\n    PUT /api/comment/1\r\n    {\r\n        \"id\": 1,\r\n        \"text\": \"Updated comment text\",\r\n        \"artifactId\": 1,\r\n        \"userId\": 2\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the comment to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated comment data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated comment"
          },
          "400": {
            "description": "If the comment data is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the comment is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Comment"
        ],
        "summary": "Delete a comment by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the comment to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "If the comment is successfully deleted"
          },
          "404": {
            "description": "If the comment is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Comment/artifact/{artifactId}": {
      "get": {
        "tags": [
          "Comment"
        ],
        "summary": "Retrieve all comments for a specific artifact by its ID.",
        "parameters": [
          {
            "name": "artifactId",
            "in": "path",
            "description": "The ID of the artifact to retrieve comments for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of comments for the specified artifact"
          },
          "404": {
            "description": "If no comments are found for the artifact",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Exhibition": {
      "get": {
        "tags": [
          "Exhibition"
        ],
        "summary": "Retrieve all exhibitions.",
        "responses": {
          "200": {
            "description": "Returns the list of exhibitions"
          }
        }
      },
      "post": {
        "tags": [
          "Exhibition"
        ],
        "summary": "Create a new exhibition.",
        "description": "Sample Request:\r\n    POST /api/exhibition\r\n    {\r\n        \"title\": \"Exhibition 1\",\r\n        \"startDate\": \"2023-10-01\",\r\n        \"endDate\": \"2023-10-15\",\r\n        \"location\": \"Gallery Hall A\",\r\n        \"description\": \"A sample exhibition\"\r\n    }",
        "requestBody": {
          "description": "The exhibition to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Exhibition"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Exhibition"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Exhibition"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created exhibition"
          },
          "400": {
            "description": "If the exhibition is null or invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Exhibition/{id}": {
      "get": {
        "tags": [
          "Exhibition"
        ],
        "summary": "Retrieve a specific exhibition by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the exhibition to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the exhibition with the specified ID"
          },
          "404": {
            "description": "If the exhibition is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Exhibition"
        ],
        "summary": "Update an existing exhibition.",
        "description": "Sample Request:\r\n    PUT /api/exhibition/1\r\n    {\r\n        \"id\": 1,\r\n        \"title\": \"Updated Exhibition\",\r\n        \"startDate\": \"2023-10-01\",\r\n        \"endDate\": \"2023-10-20\",\r\n        \"location\": \"Gallery Hall B\",\r\n        \"description\": \"Updated description\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the exhibition to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated exhibition data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Exhibition"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Exhibition"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Exhibition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated exhibition"
          },
          "400": {
            "description": "If the exhibition data is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the exhibition is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Exhibition"
        ],
        "summary": "Delete an exhibition by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the exhibition to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "If the exhibition is successfully deleted"
          },
          "404": {
            "description": "If the exhibition is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Exhibition/exists/{id}": {
      "get": {
        "tags": [
          "Exhibition"
        ],
        "summary": "Check if an exhibition exists by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the exhibition to check.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns true if the exhibition exists, false otherwise"
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "MyGalleryApi"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/User": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve all users.",
        "responses": {
          "200": {
            "description": "Returns the list of users"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user.",
        "description": "Sample Request:\r\n    POST /api/user\r\n    {\r\n        \"username\": \"newuser\",\r\n        \"email\": \"newuser@example.com\",\r\n        \"passwordHash\": \"hashedpassword\",\r\n        \"displayName\": \"New User\",\r\n        \"role\": \"Member\"\r\n    }",
        "requestBody": {
          "description": "The user to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created user"
          },
          "400": {
            "description": "If the user is null or invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/User/searchid/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve a specific user by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user with the specified ID"
          },
          "404": {
            "description": "If the user is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/User/{id}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update an existing user.",
        "description": "Sample Request:\r\n    PUT /api/user/1\r\n    {\r\n        \"id\": 1,\r\n        \"username\": \"updateduser\",\r\n        \"email\": \"updateduser@example.com\",\r\n        \"passwordHash\": \"updatedhashedpassword\",\r\n        \"displayName\": \"Updated User\",\r\n        \"role\": \"Admin\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The updated user data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated user"
          },
          "400": {
            "description": "If the user data is invalid",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "If the user is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "If the user is successfully deleted"
          },
          "404": {
            "description": "If the user is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/User/exists/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Check if a user exists by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to check.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns true if the user exists, false otherwise"
          }
        }
      }
    },
    "/api/User/searchname/{username}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve a specific user by their username.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The username of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user with the specified username"
          },
          "404": {
            "description": "If the user is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Artifact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "artistId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "exhibitionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "artist": {
            "$ref": "#/components/schemas/Artist"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "exhibition": {
            "$ref": "#/components/schemas/Exhibition"
          }
        },
        "additionalProperties": false
      },
      "Artist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "deathDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "nationality": {
            "type": "string",
            "nullable": true
          },
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Artifact"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "artifactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "artifact": {
            "$ref": "#/components/schemas/Artifact"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "Exhibition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "artifacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Artifact"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}